{"version":3,"sources":["components/custom-form/customform.component.jsx","components/custom-button/custombutton.component.jsx","components/table-maker/table-maker.component.jsx","pages/home.component.jsx","App.js","index.js"],"names":["CustomForm","className","type","name","CustomButton","children","handleClick","otherProps","onClick","TableMaker","props","initializeTable","setState","initialized","handlecreateTable","forms","document","querySelectorAll","Object","values","map","e","formData","FormData","data","Array","from","entries","reduce","memo","pair","newState","assign","state","push","$","slideUp","show","handleAppendDef","columnscount","update_rowDef","req_coldata","id","rowDef","forEach","coldata","clearRowForm","addRow","new_row_val","p","value","idToUpdate","target","getAttribute","parseInt","Math","floor","random","deleteRow","unique_id","parentElement","resultant_rows","updateRow","rowforminputs","idx","attr","getElementById","removeAttribute","colDef","this","key","i","style","width","length","readOnly","React","createElement","checked","Component","HomePage","window","location","reload","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.2919f6b1.chunk.js","sourcesContent":["import React from 'react'\n\nexport const CustomForm = () => (\n    <form className='custom-form'>\n        <label>label:</label>\n        <input type=\"text\" name='label' />\n        <label>Width:</label>\n        <input type=\"text\" name='width' />\n        <label>type:</label>\n        <input type=\"text\" name='type' />\n    </form>\n);","import React from 'react'\n\nimport './custombutton.styles.css'\n\nexport const CustomButton = ({ children, handleClick, ...otherProps }) => (\n    <button className='custom-button' onClick={handleClick}  {...otherProps}>\n        {children}\n    </button>\n);","import React from 'react'\nimport { CustomForm } from '../custom-form/customform.component'\nimport { CustomButton } from '../custom-button/custombutton.component'\nimport $ from 'jquery'\n\nimport './table-maker.styles.css'\n\nclass TableMaker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            initialized: false,\n            columnscount: 0,\n            colDef: [],\n            rowDef: []\n        }\n    }\n\n    //initialize the table creation process ; show column definition forms\n    initializeTable = () => {\n        this.setState({ initialized: true });\n    }\n\n    //take data from column definition forms and make it into a json obj for state.colDef\n    handlecreateTable = () => {\n        let forms = document.querySelectorAll('.custom-form');\n        // eslint-disable-next-line\n        Object.values(forms).map(e => {\n            let formData = new FormData(e)\n            let data = Array.from(formData.entries()).reduce((memo, pair) => ({\n                ...memo,\n                [pair[0]]: pair[1],\n            }), {});\n            let newState = Object.assign({}, this.state); // Clone the state obj in newState\n            newState['colDef'].push(data);             // modify newState\n            this.setState(newState);\n        })\n        $('.initt').slideUp();\n        $('#table-div').show();\n    }\n\n    //this method just handles the appending of column Definition form\n    handleAppendDef = () => {\n        this.setState({ columnscount: (this.state.columnscount + 1) })\n    }\n\n    //updates state.rowDef by updating the respective json element using row's id\n    update_rowDef = (req_coldata, id) => {\n        let newState = Object.assign({}, this.state);\n        newState.rowDef.forEach((e) => {\n            if (e.id === id) {\n                e.coldata = req_coldata\n            }\n        })\n        this.setState(newState);\n        this.clearRowForm();\n    }\n\n    //take input from rowform and push it into state.rowDef\n    addRow = (e) => {\n        let new_row_val = Object.values(document.querySelectorAll('#rowform input'))\n        let coldata = []\n        new_row_val.map(p => coldata.push(p.value))\n        let idToUpdate = e.target.getAttribute('idToUpdate')\n        if (idToUpdate) {\n            return this.update_rowDef(coldata, parseInt(idToUpdate))\n        }\n        let unique_id = Math.floor(Math.random() * 90000) + 100000;\n        let data = {\n            id: unique_id,\n            coldata: coldata\n        }\n        let newState = Object.assign({}, this.state); // Clone the state obj in newState\n        newState['rowDef'].push(data);             // modify newState\n        this.setState(newState);\n        this.clearRowForm();\n    }\n\n    // delete a rowDef element by id matching\n    deleteRow = (e) => {\n        let unique_id = parseInt(e.target.parentElement.parentElement.className)\n        let resultant_rows = []\n        let newState = Object.assign({}, this.state); // Clone the state obj in newState\n        newState.rowDef.forEach((e) => {\n            if (e.id !== unique_id) {\n                resultant_rows.push(e)\n            }\n        })\n\n        newState.rowDef = resultant_rows\n        this.setState(newState);\n    }\n\n    //UpdateRow method take the target and push the data to rowform, for user to update that particular row.\n    updateRow = (e) => {\n        let unique_id = parseInt(e.target.parentElement.parentElement.className)\n        let rowforminputs = Object.values(document.querySelectorAll('#rowform input'))\n        let req_coldata = []\n        this.state.rowDef.forEach((e) => {\n            if (e.id === unique_id) {\n                req_coldata = e.coldata\n            }\n        })\n        rowforminputs.map((e, idx) => e.value = req_coldata[idx])\n        $('#row-def-handler').attr('idtoupdate', unique_id)\n    }\n\n    // just clears rowform everytime addRow or updateRow is called.\n    clearRowForm = () => {\n        document.querySelectorAll('#rowform input').forEach(e => e.value = '')\n        document.getElementById('row-def-handler').removeAttribute('idtoupdate')\n    }\n\n    render() {\n        const { initialized, columnscount, colDef, rowDef } = this.state\n        return (\n            <div className='tablemaker'>\n                <div className=\"initt\">\n                    <CustomButton handleClick={this.initializeTable}>\n                        Initialize Table\n                    </CustomButton>\n                    {\n                        initialized ?\n                            (\n                                <div>\n                                    <div id='col-defs-div'>\n                                        <p> Enter Column Definitions:</p>\n                                        <CustomForm key={0} />\n                                        {\n                                            [...Array(columnscount)].map((e, i) =>\n                                                <CustomForm key={i + 1} />)\n                                        }\n                                    </div>\n                                    <CustomButton handleClick={this.handleAppendDef}>Add Definition</CustomButton>\n                                    <CustomButton handleClick={this.handlecreateTable} id='create_table'>Create</CustomButton>\n                                </div>\n                            ) : null\n                    }\n                </div>\n                <div id='table-div'>\n                    <table>\n                        <thead>\n                            <tr>\n                                {\n                                    colDef.map((e, idx) => (\n                                        < th key={idx}\n                                            style={{\n                                                width: e['width']\n                                            }}\n                                        >\n                                            {e['label']}\n                                        </th>\n                                    ))\n                                }\n                                <th className='actions-thead'> Actions </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                (colDef.length !== 0) ?\n                                    (rowDef.map((e) => (\n                                        <tr key={e.id} className={e.id}>\n                                            {\n                                                e.coldata.map((p, idx) => (\n                                                    < td key={idx} >\n                                                        {(() => {\n                                                            if (colDef[idx]['type'] === 'input') {\n                                                                return (\n                                                                    <input type='input' value={p} readOnly />\n                                                                )\n                                                            } else if (colDef[idx]['type'] === 'checkbox') {\n                                                                return (\n                                                                    p === 'true' ?\n                                                                        React.createElement('input', { type: 'checkbox', checked: true, readOnly: true })\n                                                                        :\n                                                                        React.createElement('input', { type: 'checkbox', checked: false, readOnly: true })\n                                                                )\n                                                            } else {\n                                                                return (\n                                                                    p\n                                                                )\n                                                            }\n                                                        })()}\n                                                    </td>\n                                                ))\n                                            }\n                                            <td>\n                                                <CustomButton handleClick={this.deleteRow}>Delete</CustomButton>\n                                                <CustomButton handleClick={this.updateRow}>Update</CustomButton>\n                                            </td>\n                                        </tr>\n                                    ))) : null\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"add-row-forms\">\n                        {\n                            (colDef.length !== 0) ?\n                                (\n                                    <div id='row-form-div'>\n                                        <form id='rowform'>\n                                            {colDef.map((e, i) =>\n                                                <div key={i}>\n                                                    <label>{e['label']} : </label>\n                                                    <input type='text' name={e['label']} />\n                                                </div>\n                                            )}\n                                        </form>\n                                        <CustomButton handleClick={this.addRow} id='row-def-handler'>Submit</CustomButton>\n                                    </div>\n                                ) : null\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TableMaker;\n","import React from 'react'\nimport TableMaker from '../components/table-maker/table-maker.component'\n\nimport './home.styles.css'\n\n\nexport const HomePage = () => {\n    let refreshPage = () => {\n        window.location.reload();\n    }\n    return (\n        <div className=\"homepage\">\n            <h1 onClick={refreshPage}> TableMaker </h1>\n            <TableMaker />\n        </div >\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport { HomePage } from './pages/home.component'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HomePage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}